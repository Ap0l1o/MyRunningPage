# 工作流名称：同步Strava跑步数据
name: Sync Strava Data

# 触发条件：
on:
  schedule:
    - cron: '*/3 * * * *'  # 每2小时执行一次，使用cron表达式设置定时任务
  workflow_dispatch:  # 允许手动触发工作流，方便测试和临时同步数据

# 工作流所需权限配置
permissions:
  contents: write  # 需要写入权限以提交更新的数据文件

# 工作流任务定义
jobs:
  sync:  # 同步任务
    runs-on: ubuntu-latest  # 在最新版Ubuntu环境中运行
    steps:
      # 步骤1：检出代码仓库
      - uses: actions/checkout@v3
        with:
          ref: data  # 检出data分支，用于存储跑步数据
      
      # 步骤2：配置Python环境
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'  # 使用Python 3.10版本
      
      # 步骤3：安装依赖包
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install stravalib==1.5 python-dotenv requests "pydantic<2.0"
      
      # 步骤4：运行数据同步脚本
      - name: Sync Strava Data
        env:
          STRAVA_CLIENT_ID: ${{ secrets.STRAVA_CLIENT_ID }}  # Strava应用的客户端ID
          STRAVA_CLIENT_SECRET: ${{ secrets.STRAVA_CLIENT_SECRET }}  # Strava应用的客户端密钥
          STRAVA_REFRESH_TOKEN: ${{ secrets.STRAVA_REFRESH_TOKEN }}  # Strava的刷新令牌
        run: |
          python scripts/fetch_strava_data.py \
            --client-id "$STRAVA_CLIENT_ID" \
            --client-secret "$STRAVA_CLIENT_SECRET" \
            --refresh-token "$STRAVA_REFRESH_TOKEN"
      
      # 步骤5：检查是否有数据更新
      - name: Check for Changes
        id: check_changes
        run: |
          git add content/runs/
          if git diff --staged --quiet; then
            echo "changes=false" >> $GITHUB_OUTPUT
          else
            echo "changes=true" >> $GITHUB_OUTPUT
          fi
      
      # 步骤6：如果有更新，提交并推送更改
      - name: Commit and Push
        if: steps.check_changes.outputs.changes == 'true'
        run: |
          git config --global user.name 'Strava Sync Bot'  # 设置Git提交用户名
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'  # 设置Git提交邮箱
          git add content/runs/  # 添加更新的数据文件
          git commit -m "Update running data"  # 提交更改
          git push origin data  # 推送到data分支
      
      # 步骤7：触发网站部署工作流
      - name: Trigger Deploy Workflow
        if: steps.check_changes.outputs.changes == 'true'
        uses: peter-evans/repository-dispatch@v2
        with:
          event-type: deploy-site  # 触发deploy-site事件
          token: ${{ secrets.GITHUB_TOKEN }}  # 使用GitHub Token进行认证